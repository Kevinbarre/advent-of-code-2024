from main import part1, part2, parse_coordinates, generate_grid, simulate_fall, get_possible_moves, dijkstra

filename = "example.txt"


def test_part1():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part1(lines, 6, 12)
    # Then
    assert result == 22


def test_part2():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part2(lines)
    # Then
    assert result == 0


def test_parse_coordinates():
    # Given
    lines = ["5,4",
             "4,2",
             "4,5",
             "3,0",
             "2,1",
             "6,3",
             "2,4",
             "1,5",
             "0,6",
             "3,3",
             "2,6",
             "5,1",
             "1,2",
             "5,5",
             "2,5",
             "6,5",
             "1,4",
             "0,4",
             "6,4",
             "1,1",
             "6,1",
             "1,0",
             "0,5",
             "1,6",
             "2,0"
             ]
    # When
    result = parse_coordinates(lines)
    # Then
    assert result == [(5, 4), (4, 2), (4, 5), (3, 0), (2, 1), (6, 3), (2, 4), (1, 5), (0, 6), (3, 3), (2, 6), (5, 1), (1, 2), (5, 5), (2, 5), (6, 5), (1, 4),
                      (0, 4), (6, 4), (1, 1), (6, 1), (1, 0), (0, 5), (1, 6), (2, 0)]


def test_generate_grid():
    # Given
    n = 6
    # When
    grid, start, end = generate_grid(n)
    # Then
    assert grid == [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]
    assert start == (1, 1)
    assert end == (7, 7)


def test_generate_grid_independent_rows():
    # Given
    n = 6
    # When
    grid, _, _ = generate_grid(n)
    grid[1][1] = '#'
    # Then
    assert grid == [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '#', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]


def test_simulate_fall():
    # Given
    grid = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '.', '.', '.', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]
    coordinates = [(5, 4), (4, 2), (4, 5), (3, 0), (2, 1), (6, 3), (2, 4), (1, 5), (0, 6), (3, 3), (2, 6), (5, 1), (1, 2), (5, 5), (2, 5), (6, 5), (1, 4),
                   (0, 4), (6, 4), (1, 1), (6, 1), (1, 0), (0, 5), (1, 6), (2, 0)]
    number_bytes = 12

    # When
    result = simulate_fall(grid, coordinates, number_bytes)
    # Then
    assert result == [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '.', '.', '#', '.', '.', '.', '#'],
        ['#', '.', '.', '#', '.', '.', '#', '.', '#'],
        ['#', '.', '.', '.', '.', '#', '.', '.', '#'],
        ['#', '.', '.', '.', '#', '.', '.', '#', '#'],
        ['#', '.', '.', '#', '.', '.', '#', '.', '#'],
        ['#', '.', '#', '.', '.', '#', '.', '.', '#'],
        ['#', '#', '.', '#', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]


def test_get_possible_moves():
    # Given
    grid = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '.', '.', '#', '.', '.', '.', '#'],
        ['#', '.', '.', '#', '.', '.', '#', '.', '#'],
        ['#', '.', '.', '.', '.', '#', '.', '.', '#'],
        ['#', '.', '.', '.', '#', '.', '.', '#', '#'],
        ['#', '.', '.', '#', '.', '.', '#', '.', '#'],
        ['#', '.', '#', '.', '.', '#', '.', '.', '#'],
        ['#', '#', '.', '#', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]
    position = (1, 1)
    # When
    result = get_possible_moves(grid, position)
    # Then
    assert result == {(2, 1), (1, 2)}


def test_dijkstra():
    # Given
    grid = [
        ['#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '.', '.', '#', '.', '.', '.', '#'],
        ['#', '.', '.', '#', '.', '.', '#', '.', '#'],
        ['#', '.', '.', '.', '.', '#', '.', '.', '#'],
        ['#', '.', '.', '.', '#', '.', '.', '#', '#'],
        ['#', '.', '.', '#', '.', '.', '#', '.', '#'],
        ['#', '.', '#', '.', '.', '#', '.', '.', '#'],
        ['#', '#', '.', '#', '.', '.', '.', '.', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#']
    ]
    start = (1, 1)
    end = (7, 7)
    # When
    result = dijkstra(grid, start, end)
    # Then
    assert result == 22
