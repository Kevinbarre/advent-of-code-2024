from main import part1, part2, parse_level, move, UP, RIGHT, DOWN, LEFT, count_x, run_through_level

filename = "example.txt"


def test_part1():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part1(lines)
    # Then
    assert result == 41


def test_part2():
    # Given
    with open(filename) as f:
        lines = f.read().splitlines()
    # When
    result = part2(lines)
    # Then
    assert result == 0


def test_parse_level():
    # Given
    lines = [
        "....#.....",
        ".........#",
        "..........",
        "..#.......",
        ".......#..",
        "..........",
        ".#..^.....",
        "........#.",
        "#.........",
        "......#..."
    ]
    # When
    starting_position, level = parse_level(lines)
    # Then
    assert starting_position == (5, 7)
    assert level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]


def test_move_up():
    # Given
    position = (5, 7)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = UP
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (5, 6)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == UP


def test_move_reach_obstacle_up():
    # Given
    position = (5, 2)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = UP
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (5, 2)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == RIGHT


def test_move_right():
    # Given
    position = (5, 2)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = RIGHT
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (6, 2)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == RIGHT


def test_move_reach_obstacle_right():
    # Given
    position = (9, 2)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = RIGHT
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (9, 2)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == DOWN


def test_move_down():
    # Given
    position = (9, 2)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = DOWN
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (9, 3)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == DOWN


def test_move_reach_obstacle_down():
    # Given
    position = (9, 7)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = DOWN
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (9, 7)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == LEFT


def test_move_left():
    # Given
    position = (9, 7)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = LEFT
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (8, 7)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', 'X', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == LEFT


def test_move_cross_path():
    # Given
    position = (6, 7)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = LEFT
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (5, 7)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == LEFT


def test_move_reach_obstacle_left():
    # Given
    position = (3, 7)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = LEFT
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == False
    assert new_position == (3, 7)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == UP


def test_move_exit_level():
    # Given
    position = (8, 10)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', '.', 'X', '.', 'X', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '#', '.', 'Z'],
        ['Z', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', 'X', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    direction = DOWN
    # When
    new_position, new_level, new_direction, done = move(position, level, direction)
    # Then
    assert done == True
    assert new_position == (8, 10)
    assert new_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', '.', 'X', '.', 'X', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '#', '.', 'Z'],
        ['Z', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', 'X', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert new_direction == DOWN


def test_run_through_level():
    # Given
    starting_position = (5, 7)
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '#', '.', '.', 'X', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'Z'],
        ['Z', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    # When
    final_position, final_level, final_direction = run_through_level(starting_position, level)
    # Then
    assert final_position == (8, 10)
    assert final_level == [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', '.', 'X', '.', 'X', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '#', '.', 'Z'],
        ['Z', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', 'X', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    assert final_direction == DOWN


def test_count_x():
    # Given
    level = [
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z'],
        ['Z', '.', '.', '.', '.', '#', '.', '.', '.', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'Z'],
        ['Z', '.', '.', '.', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', '#', '.', 'X', '.', '.', '.', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', 'X', 'X', 'X', 'X', '#', 'X', '.', 'Z'],
        ['Z', '.', '.', 'X', '.', 'X', '.', 'X', '.', 'X', '.', 'Z'],
        ['Z', '.', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', 'Z'],
        ['Z', '.', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '#', '.', 'Z'],
        ['Z', '#', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '.', '.', 'Z'],
        ['Z', '.', '.', '.', '.', '.', '.', '#', 'X', '.', '.', 'Z'],
        ['Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z']
    ]
    # When
    result = count_x(level)
    # Then
    assert result == 41
